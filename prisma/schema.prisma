generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  image          String?
  hashedPassword String?
  emailVerified  DateTime?
  role           Role           @default(USER)
  status         Status         @default(ACTIVE)
  lastLogin      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  guiaProfile    Guia?
  loginAttempts  LoginAttempt[]
  reservas       Reserva[]
  reviews        Review[]
  sessions       Session[]
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  success   Boolean
  ip        String
  userAgent String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PendingUser {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  hashedPassword String
  token          String   @unique
  expires        DateTime
  createdAt      DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  tourId    String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tourId])
  @@index([userId])
}

model Reserva {
  id                 Int      @id @default(autoincrement())
  nombre             String
  correo             String
  telefono           String
  fecha              DateTime
  hora               String?
  tourId             String
  guiaId             Int?
  userId             String
  adultos            Int
  ni√±os             Int
  participantes      Json?
  contactoEmergencia Json?
  estado             String?  @default("Pagada")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  Guia               Guia?    @relation(fields: [guiaId], references: [id], onDelete: Cascade)
  Tour               Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Guia {
  id          Int       @id @default(autoincrement())
  userId      String?   @unique
  nombre      String
  foto        String?
  edad        Int?
  descripcion String?
  celular     String?
  cedula      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  Reservas    Reserva[]
}

model Tour {
  id             String          @id @default(cuid())
  nombre         String
  descripcion    String
  salida         String?         @default("Por definir")
  regreso        String?         @default("Por definir")
  maxReservas    Int
  guias          Int
  precio         Float           @default(0.0)
  ubicacion      String          @default("Por definir")
  imagenUrl      String?         @default("https://via.placeholder.com/600x400?text=Imagen+del+Tour")
  gallery        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  availableDates AvailableDate[]
  Reservas       Reserva[]
  reviews        Review[]
}

model AvailableDate {
  id        String   @id @default(cuid())
  date      DateTime
  tourId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, date])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUIA
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}
