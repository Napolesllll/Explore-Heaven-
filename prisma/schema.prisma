generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  hashedPassword  String?
  emailVerified   DateTime?
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  loginAttempts   LoginAttempt[]
  reviews         Review[]
  reservas        Reserva[]
  // Relación con Guia si el usuario es una guía
  guiaProfile     Guia?
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  success   Boolean
  ip        String
  userAgent String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [email], references: [email])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUIA
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PendingUser {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  hashedPassword String
  token          String   @unique
  expires        DateTime
  createdAt      DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  tourId    String
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tourId])
  @@index([userId])
}

model Reserva {
  id        Int      @id @default(autoincrement())
  nombre    String
  correo    String
  telefono  String
  fecha     DateTime
  hora      String?
  tourId    String
  guiaId    Int?
  userId    String
  adultos   Int
  niños     Int
  participantes Json?
  contactoEmergencia Json?
  estado    String? @default("Pagada")
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  Guia      Guia?    @relation(fields: [guiaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guia {
  id          Int      @id @default(autoincrement())
  userId      String?  @unique // Relación con User
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  nombre      String
  foto        String?
  edad        Int?
  descripcion String?
  celular     String?
  cedula      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Reservas Reserva[] 
}

model Tour {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String
  salida      String?  @default("Por definir")
  regreso     String?  @default("Por definir")
  maxReservas Int
  guias       Int
  precio      Float    @default(0.0)
  ubicacion   String   @default("Por definir")
  imagenUrl   String?  @default("https://via.placeholder.com/600x400?text=Imagen+del+Tour")
  gallery     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  availableDates AvailableDate[]
  Reservas    Reserva[]
}

model AvailableDate {
  id        String   @id @default(cuid())
  date      DateTime
  tourId    String
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tourId, date])
}